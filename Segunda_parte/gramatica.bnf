<function> ::=
  void fname '('
    ( [void] |
      [<datatype> arg_name>{',' <datatype> arg_name}]
    )
  ')' '{'
    {<statement>} [return ';']
  '}' |
  <datatype> fname '('
    ( [void] |
      [<datatype> arg_name>{',' <datatype> arg_name}]
    )
  ')' '{'
    {<statement>} return <expression> ';'
  '}'

<statement> ::=
  <assignment_statement> |
  <loop_statement> |
  <conditional_statement> |
  <expression> ';' |
  return [<expression>] ';'

<conditional> :: =
  [!] (<value> | <variable> | <function_call_statement>)
      {<relational_operator> <conditional>} |
  [!] (<value> | <variable> | <function_call_statement>)
      {<logical_operator> <conditional>}

<expression> ::=
  (<value> | <variable> | <conditional> | <function_call_statement>)
  {<operator> <expression>}

<assignment_statement> ::=
  <datatype> <variable> ';' |
  <datatype> <variable> '=' <expression> ';' |
  <variable> '=' <expression> ';' |
  <datatype> <variable>{'['(<variable>|integer)']'} ';' |
  <datatype> <variable>'[]' ';'

<loop_statement> ::=
  while '(' <expression> ')' '{' {<statement>} '}' |
  do '{' {<statement>} '}' while '(' <expression> ')' ';' |
  for '(' [
            (<assignment_statement> | <expression>)
            {, (<assignment_statement> | <expression>)}
          ] ';'
          [<expression>{, <expression>}] ';'
          [<expression>{, <expression>}]
      ')'
      '{' {<statement>} '}'

<conditional_statement> ::=
  if '(' <expression> ')' '{' {<statement>} '}' |
  if '(' <expression> ')' '{' {<statement>} '}'
  else '{' {<statement>} '}' |
  if '(' <expression> ')' '{' {<statement>} '}'
  { else if '(' <expression> ')' '{' {<statement>} '}' }
  else '{' {<statement>} '}'

<arg> ::=
  <variable>{',' <arg>} |
  <value>{',' <arg>} |
  <function_call_statement>{',' <arg>}

<function_call_statement> ::=
  fname '(' [<arg>] ')'

<variable> ::= (<letter> | _)[ {[<digit>] <letter>} ]

<datatype> ::= char | int | short | long | float | double
<relational_operator> ::= == | > | < | => | =< | !=
<logical_operator> ::= "&&" | "||" | "!"
<operator> ::= + | - | * | /
<value> ::= integer | decimal | string | character
<letter> ::= a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|
             A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
<digit> ::= 0|1|2|3|4|5|6|7|8|9
